'use strict';

var app = angular.module('Meaniscule', ['ui.router', 'ui.bootstrap']);

app.config(function ($urlRouterProvider, $locationProvider) {
   // This turns off hashbang urls (/#about) and changes it to something normal (/about)
   $locationProvider.html5Mode(true);
   // If we go to a URL that ui-router doesn't have registered, go to the "/" url.
   $urlRouterProvider.otherwise('/');
});
'use strict';

app.controller('HomeController', function ($scope, $http) {

	$scope.filteredData;
	$scope.currentWords;
	$scope.rating = {};
	$scope.done = false;
	$scope.$watch('rating.selected', function (newValue, oldValue) {
		if (!newValue || !$scope.filteredData) return;
		if (newValue === 1) {
			$scope.createWords(newValue);
		} else {
			$scope.createWords(newValue / 2);
		}
	});

	$scope.getReviews = function () {
		$http.get('/api/reviews').then(function (response) {
			return JSON.parse(response.data);
		}).then(function (data) {
			$scope.filteredData = translateData(data);
			$scope.done = true;
			console.log('Data has arrived!');
		})['catch'](function (err) {
			console.error(err);
		});
	};

	function translateData(data) {
		var filteredData = {};
		for (var rating in data) {
			if (rating && !isNaN(rating)) {

				filteredData[rating] = {};
				data[rating].filter(function (taggedWord) {
					return taggedWord[1] === 'JJ' && taggedWord[0][0] !== '\'';
				}).forEach(function (taggedAdjectives) {
					filteredData[rating][taggedAdjectives[0]] = ++filteredData[rating][taggedAdjectives[0]] || 1;
				});

				filteredData[rating] = Object.keys(filteredData[rating]).sort(function (a, b) {
					return filteredData[rating][a] - filteredData[rating][b];
				}).reverse().splice(0, 20);
			}
		};
		return filteredData;
	}

	$scope.createWords = function (stars) {
		$scope.currentWords = $scope.filteredData[stars];
		d3.select('#wordCloud').remove();
		var fill = d3.scale.category20();
		var layout = d3.layout.cloud().size([500, 500]).words($scope.currentWords.map(function (d) {
			return {
				text: d,
				size: 10 + Math.random() * 90,
				test: 'haha'
			};
		})).padding(5).rotate(function () {
			var negRandom = Math.random() < 0.5 ? -1 : 1;
			return ~ ~(Math.random() * 2) * 60 * negRandom;
		}).font('Helvetica Neue').fontSize(function (d) {
			return d.size;
		}).on('end', draw);
		layout.start();

		function draw(words) {
			d3.select('#demo').append('svg').attr('id', 'wordCloud').attr('width', layout.size()[0]).attr('height', layout.size()[1]).append('g').attr('transform', 'translate(' + layout.size()[0] / 2 + ',' + layout.size()[1] / 2 + ')').selectAll('text').data(words).enter().append('text').style('font-size', function (d) {
				return d.size + 'px';
			}).style('font-family', 'Helvetica Neue').style('fill', function (d, i) {
				return fill(i);
			}).attr('text-anchor', 'middle').attr('transform', function (d) {
				return 'translate(' + [d.x, d.y] + ')rotate(' + d.rotate + ')';
			}).text(function (d) {
				return d.text;
			});
		}
	};
});
'use strict';

app.config(function ($stateProvider) {
    $stateProvider.state('home', {
        url: '/',
        templateUrl: '/app/home/home.html',
        controller: 'HomeController'
    });
});
'use strict';

app.controller('ModulesController', function ($scope, $http, ModulesFactory) {

  $scope.$on('$stateChangeSuccess', function () {
    var defaultMessage = 'If you don\'t see a list of links here, you need to seed your database!\nIn your terminal, go to this app\'s directory and run `gulp seedDB`.\nThen try this page again.';

    ModulesFactory.getNodeModules().then(function (modules) {
      $scope.nodeModules = modules;

      if (!$scope.nodeModules.length) {
        $scope.defaultMessage = defaultMessage;
      }
    });
  });
});
'use strict';

app.factory('ModulesFactory', function ($http) {
  return {
    getNodeModules: function getNodeModules() {
      return $http.get('/api/modules/').then(function (res) {
        return res.data;
      });
    }
  };
});
'use strict';

app.config(function ($stateProvider) {
    $stateProvider.state('modules', {
        url: '/modules',
        templateUrl: '/app/modules/modules.html',
        controller: 'ModulesController'
    });
});
"use strict";

app.directive("navbar", function () {
	return {
		restrict: "E",
		templateUrl: "/app/navbar/navbar.html"
	};
});
//# sourceMappingURL=data:application/json;base64,